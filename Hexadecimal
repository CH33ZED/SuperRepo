//skeleton file for class Binary
/*
Ziyan Lin, Jongyoul Lee	
APCS1 pd9
HW44 -- This or That
2015 12 07 
*/



public class Hexadecimal implements Comparable{

    private int _decNum;
    private String _hexNum;
    private final static String HEXDIGITS = "0123456789ABCDEF"; 
    
    public Hexadecimal() { 
        _decNum = 0;
        _hexNum = "0";
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }
    
    public int getNum(){
    	return _decNum;
    }

    /*=====================================
      overloaded constructor
      pre:  n >= 0
      post: sets _decNum to n, _binNum to equiv string of bits
      =====================================*/
    public Hexadecimal( int n ) {
        _decNum = n;
        _hexNum = n + "";
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }


    /*=====================================
      overloaded constructor
      pre:  s is String representing non-negative binary number
      post: sets _binNum to input, _decNum to decimal equiv
      =====================================*/
    public Hexadecimal( String s ) {
        _hexNum = s;
        _decNum = Integer.parseInt(s);
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }

    public String toString() {
        return decToHex(_decNum);
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }     
 
    public static String decToHex( int n ) 
    {
	String retStr = ""; //init return String

	if ( n < 16 )
	    retStr = HEXDIGITS.substring(n,n+1);
	else 
	    while( n > 0 ) {
		retStr = HEXDIGITS.substring(n % 16, n % 16 +1) + retStr;
		n /= 16;
	    }
	return retStr;
    }

   
    
    public static String decToHexR( int n ) 
    { 
	String retStr; //declare return String

	//Base cases: n is single digit, 0|1
	if ( n < 16 ) retStr = HEXDIGITS.substring(n,n+1);
	//Recursive reduction:
	else 
	    retStr = decToHexR( n/16 ) + HEXDIGITS.substring(n%16,(n%16)+1);
	return retStr;
    }
    
    public static int hexToDec( String s ) { 
        int a = 0;
        int b = 1;
        String c = s;
        // since the digit's value is equal to its index in the final string, I multiplied the last digit by its base value and then add it to the sum (a).
        while (c.length() > 0){
            a += HEXDIGITS.indexOf(c.substring(c.length()-1))* b;
	    b *= 16;            //base case increase by 16 times between digits
            c = c.substring(0,(c.length()-1));  //shorten c to remove its last digit
        }
        return a;
    }


    
    public static int hexToDecR( String s ) { 
        int a = 0; 
        if (s.length() > 0){
            a = HEXDIGITS.indexOf(s.substring(0,1)) * (int)(Math.pow(16,s.length()-1)) + hexToDecR(s.substring(1));
	//take the first digit of the input and multipy its index in the final string to 16 to the power of the length of the string, then it adds the product to the sum and repeat the process with the same string without its first digit.
        }
        return a;
    }
    
    public boolean equals( Object other ) { 
        boolean a = this == other;
        if (!a)
            a = other instanceof Hexadecimal 
            && this._decNum == ((Hexadecimal)other)._decNum 
            && this._hexNum.equals(((Hexadecimal)other)._hexNum);
        return a;
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }


    /*=============================================
      int compareTo(Object) -- tells which of two Binary objects is greater
      pre:  other is instance of class Binary
      post: Returns 0 if this Object is equal to the input Object,
      negative integer if this<input, positive integer otherwise
      =============================================*/
    public int compareTo( Object other ) {
      try{
        if (this._decNum < ((Hexadecimal)other)._decNum){
	    return -1;
        }
        if (this._decNum == ((Hexadecimal)other)._decNum){
	    return 0;
        }
        return 1;
      }
      catch(Exception e){
      	if(!(other instanceof Hexadecimal)){
      	    throw new classCastException("\n Wrong class type! input not a Hexadecimal")
        }
      	if(other == null){
            throw new NullPointerException("\n No input detected.")
      	}
      }
	/****** YOUR IMPLEMENTATION HURRR ******/   
    }
   
    public static void main( String[] args ) {
        System.out.println(decToHex(419));
        System.out.println(decToHex(2558));
	System.out.println(decToHexR(419));
        System.out.println(decToHexR(2558)); 
        System.out.println(hexToDec("1A3"));
        System.out.println(hexToDec("9FE"));
	System.out.println(hexToDecR("1A3"));
        System.out.println(hexToDecR("9FE"));       

        /*=========================================
	  =========================================*/
    }//end main()

} //end class
